import CubicSpline from "cubic-spline";


export function AI(
    t,
    W_max = 3e12,
    k_W = 0.8,
    t_W = 2028,
    E_start = 0.8,
    r_E = 0.02,
    E_floor = 0.4,
    t_R = 2028,
    r_T = 0.005,
    T_floor = 0.75
) {
    const growth = W_max / (1 + Math.exp(-k_W * (t - t_W)));
    const efficiency = Math.max(E_floor, E_start - r_E * (t - 2023));
    const retention = Math.max(T_floor, 1 - r_T * Math.max(0, t - t_R));
    return growth * efficiency * retention;
}

export function E(t, E_max = 0.33, k_E = 0.014, t_E = 2016) {
    return E_max / (1 + Math.exp(-k_E * (t - t_E))) + 0.005;
}

export function G(t, G_max = 3000, k_G = 0.03, t_G = 2000, ai_start_year = 2024, ai_dampening_rate = 0.008) {
    const sigmoid = G_max / (1 + Math.exp(-k_G * (t - t_G))) + 25;
    const years_since_ai = Math.max(0, t - ai_start_year);
    const dampening_factor = Math.pow(1 - ai_dampening_rate, years_since_ai);
    return sigmoid * dampening_factor;
}

export function dateToYearFraction(dateString) {
    const [day, month, year] = dateString.split('/').map(Number);
    const isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
    const daysInYear = isLeapYear ? 366 : 365;
    const daysPerMonth = [31, isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    const dayOfYear = day + daysPerMonth.slice(0, month - 1).reduce((sum, days) => sum + days, 0);
    const yearFraction = dayOfYear / daysInYear;
    return year + yearFraction;
}


const years = [1500, 1600, 1700, 1710, 1720, 1730, 1740, 1750, 1760, 1770, 1780, 1790, 1800, 1810, 1820, 1830, 1840, 1850,
    1860, 1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
    1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
    1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
    1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
    2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
    2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
    2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
    2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
    2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100];
const populations = [503051104, 516147616, 595456896, 617975872, 648184768, 670899968, 702227776, 753279296, 788254976, 827951488,
    900945152, 942261696, 954892352, 1028932352, 1065623616, 1148205440, 1209754496, 1287033856, 1346093952,
    1346763136, 1427718912, 1548405760, 1670635648, 1800219392, 1927857152, 2106406144, 2328460032, 2493092801,
    2536926981, 2584086282, 2634106196, 2685894824, 2740213742, 2795409946, 2852618291, 2911249598, 2965950296,
    3015470858, 3064869609, 3123374259, 3192807773, 3264487295, 3334533671, 3404041061, 3473412825, 3545187204,
    3619491543, 3694683753, 3769847803, 3844917635, 3920804971, 3996416050, 4070735208, 4144246343, 4217863768,
    4292097452, 4368539442, 4447606162, 4528777252, 4612673388, 4697327540, 4782175455, 4868943409, 4958072773,
    5049746328, 5141992501, 5234431681, 5327803039, 5418735854, 5505989763, 5591544754, 5675551219, 5758878939,
    5842055673, 5924787768, 6007066661, 6089006306, 6171702952, 6254936409, 6337730260, 6420361599, 6503377733,
    6586970109, 6671451961, 6757308732, 6844457620, 6932766373, 7021732097, 7110923706, 7201202442, 7291793521,
    7381616193, 7470491849, 7558554482, 7645617937, 7729902735, 7811293646, 7887001253, 7954448327, 8021407128,
    8091734853, 8231613070, 8300678395, 8369094344, 8436618886, 8503285323, 8569124911, 8634119333, 8698229812,
    8761449081, 8823784909, 8885210181, 8945686614, 9005152624, 9063572926, 9120928380, 9177190203, 9232281575,
    9286110371, 9338661314, 9389873693, 9439639668, 9487889604, 9534545977, 9579536043, 9622824029, 9664378587,
    9704192304, 9742264515, 9778614614, 9813251659, 9846237570, 9877680392, 9907637193, 9936164379, 9963337082,
    9989232292, 10013916213, 10037466600, 10059950035, 10081402737, 10101849561, 10121317107, 10139808361,
    10157301941, 10173782135, 10189241959, 10203681568, 10217055169, 10229327824, 10240485056, 10250496432,
    10259351432, 10267045023, 10273556322, 10278887473, 10283078029, 10286161735, 10288205050, 10289247323,
    10289315244, 10288456599, 10286708360, 10284111374, 10280704572, 10276518280, 10271565070, 10265861714,
    10259408375, 10252184759, 10244185837, 10235403601, 10225850874, 10215549310, 10204489862, 10192689066,
    10180160751];

const spline = new CubicSpline(years, populations);

export function P(year) {
    return spline.at(year);
}

function W(t) {
    return G(t) * P(t) * E(t);
}

function integrate(f, t0, t1, steps = 1000) {
    const dt = (t1 - t0) / steps;
    let sum = 0;
    for (let i = 0; i < steps; i++) {
        const tA = t0 + i * dt;
        const tB = t0 + (i + 1) * dt;
        sum += 0.5 * (f(tA) + f(tB)) * dt;
    }
    return sum;
}

export function P_AI(t, t0 = 2023) {
    const AI_integral = integrate(AI, t0, t);
    const W_integral = integrate(W, t0, t);
    return AI_integral / (AI_integral + W_integral);
}